Product class:
-------------
'''
Created on 02-Jun-2020

@author: USER
'''

class Product(object):
    '''
    classdocs
    '''
    __productid=None
    __productname=None
    __productprice=None
    __productquantity=None
    
    def __init__(self, productid, productname, productprice, productquantity):
        self.__productid = productid
        self.__productname = productname
        self.__productprice = productprice
        self.__productquantity = productquantity


    def get_productid(self):
        return self.__productid


    def get_productname(self):
        return self.__productname


    def get_productprice(self):
        return self.__productprice


    def get_productquantity(self):
        return self.__productquantity


    def set_productid(self, value):
        self.__productid = value


    def set_productname(self, value):
        self.__productname = value


    def set_productprice(self, value):
        self.__productprice = value


    def set_productquantity(self, value):
        self.__productquantity = value


    def del_productid(self):
        del self.__productid


    def del_productname(self):
        del self.__productname


    def del_productprice(self):
        del self.__productprice


    def del_productquantity(self):
        del self.__productquantity
        
    def __str__(self):
        return str(self.__productid)+" "+self.__productname+" "+str(self.__productprice)+" "+str(self.__productquantity)

DBConnector class:
-----------------
'''
Created on 01-Jun-2020

@author: USER
'''
import json
import psycopg2
class DBConnector(object):
    '''
    classdocs
    '''


    def __init__(self):
        '''
        Constructor
        '''
        pass
    
    def connecting_to_database(self):
        file=open("connection_config.json")
        datas=json.load(file)
        data=datas["connection_details"]
        dbname=data["dbname"]
        dbserver=data["server"]
        dbusername=data["username"]
        dbpassword=data["password"]
        conne=psycopg2.connect("dbname='"+dbname+"'user='"+dbusername+"'host='"+dbserver+"'password='"+dbpassword+"'")
        #conne=psycopg2.connect("dbname='postgres' user='postgres' host='localhost' password='9790270846'")
        print("Database connection has been established")
        print(conne)
        file.close()
        return conne
            
CRUDOperations class:
--------------------
'''
Created on 02-Jun-2020

@author: USER
'''
from crudoperationstoproduct import product
import logging

class CRUDOperations(object):
    '''
    classdocs
    '''


    def __init__(self):
        '''
        Constructor
        '''
        pass    
    
    def insert_product(self,connection9,product):
        cursor=connection9.cursor()
        counter=0
        cursor.execute("INSERT INTO product(productid,productname,productprice,productquantity) VALUES(%s,%s,%s,%s)",(str(product.get_productid()),product.get_productname(),str(product.get_productprice()),str(product.get_productquantity())))
        connection9.commit()
        counter=counter+1
        logger=logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        fhandler=logging.FileHandler("logcounter.log","a")
        formatter=logging.Formatter("%(asctime)s - %(name)s - %(levelname)s : %(message)s")
        fhandler.setFormatter(formatter)
        logger.addHandler(fhandler)
        logger.info("insert counter"+str(counter))
        
    def retrieve_product(self,connection9):
        cursor=connection9.cursor()
        counter=0
        cursor.execute("SELECT productid,productname,productprice,productquantity FROM product")
        connection9.commit()
        rows=cursor.fetchall()
        for row in rows:
            counter=counter+1
        logger=logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        fhandler=logging.FileHandler("logcounter.log","a")
        formatter=logging.Formatter("%(asctime)s - %(name)s - %(levelname)s : %(message)s")
        fhandler.setFormatter(formatter)
        logger.addHandler(fhandler)
        logger.info("retrieve counter"+str(counter))
        
    def update_product(self,connection9,productid, productquantity):
        cursor=connection9.cursor()
        counter=0
        cursor.execute("UPDATE product SET productquantity=%s WHERE productid=%s",(str(productid),str(productquantity)))
        connection9.commit()
        counter=counter+1
        logger=logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        fhandler=logging.FileHandler("logcounter.log","a")
        formatter=logging.Formatter("%(asctime)s - %(name)s - %(levelname)s : %(message)s")
        fhandler.setFormatter(formatter)
        logger.addHandler(fhandler)
        logger.info("update counter"+str(counter))
        
    def delete_product(self,connection9,productid):
        cursor=connection9.cursor()
        counter=0
        cursor.execute("DELETE FROM product WHERE productid=%s",(str(productid)))
        connection9.commit()
        counter=counter+1
        logger=logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        fhandler=logging.FileHandler("logcounter.log","a")
        formatter=logging.Formatter("%(asctime)s - %(name)s - %(levelname)s : %(message)s")
        fhandler.setFormatter(formatter)
        logger.addHandler(fhandler)
        logger.info("delete counter"+str(counter))            

Main:
----
'''
Created on 02-Jun-2020

@author: USER
'''
from crudoperationstoproduct.dbconnector import DBConnector
from crudoperationstoproduct.crudoperations import CRUDOperations
from crudoperationstoproduct.product import Product
dbobject=DBConnector()
connection9=dbobject.connecting_to_database()
crudobject=CRUDOperations()
product=Product(9,'rabbits',9000.0,9)
crudobject.insert_product(connection9, product)
crudobject.retrieve_product(connection9)
productid=int(input("Enter the productid of product"))
productquantity=int(input("Enter the productquantity of product"))
crudobject.update_product(connection9, productid, productquantity)
productid2=int(input("Enter the productid for deletion"))
crudobject.delete_product(connection9, productid2)

connection_config.json:
----------------------
{
"connection_details":{"dbname":"PetStore",
                      "server":"localhost",
                      "username":"postgres",
                      "password":"9790270846"
                     }
}